
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">

    
    <!-- 1. Declares this is a Maven Project File 
    Tells Maven, "This file follows version 4.0.0 of the Maven project format." -->                         
    <modelVersion>4.0.0</modelVersion>

    <!-- 2. Unique Identifier for Your App (Like a Postal Address)
    What it does: Defines your organization/group (e.g., com.companyname).
    Example: If your company is "Example Inc.", use com.example.
    Why it matters: Helps avoid naming conflicts with other projects.  -->
    <groupId>com.example</groupId>

    <!-- 3. Name of Your App 
    What it does: Sets the name of your application (e.g., maven-sample-app).
    Why it matters: This will be part of your JAR filename (maven-sample-app-1.0.0.jar). -->
    <artifactId>maven-sample-app</artifactId>

    <!-- 4. Version of Your App 
    What it does: Specifies the app version (common formats: 1.0.0, 2.5-SNAPSHOT).
    Why it matters: Helps track releases (e.g., bug fixes = 1.0.1, new features = 1.1.0). -->
    <version>1.0.0</version>

    <!-- 5. Packaging Type 
    What it does: Tells Maven to package the app as a JAR file (runnable Java archive).
    Other options: war (for web apps), pom (for parent projects).
    Why it matters: Determines how Maven builds and packages your code. -->
    <packaging>jar</packaging>


    <!-- 6. Human-Readable Project Name 
    What it does: Gives your project a friendly name (optional but useful).
    Why it matters: Helps identify the project in logs/docs (e.g., "Simple Maven App v1.0.0"). -->
    <name>Simple Maven App</name>


    <!-- Sets the Java version to 17 for compilation. In large-scale apps, this ensures compatibility 
    and consistent builds across environments. -->
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>


        <!-- Java-specific settings -->
        <!-- Required for Java projects.Tells SonarQube where to find compiled .class files â€” needed for analysis 
        (especially for detecting code issues). -->
        <sonar.java.binaries>target/classes</sonar.java.binaries>

        <!-- Optional, but recommended if your project uses external JARs.
        Helps SonarQube resolve classes and dependencies used in your code. -->
        <!-- <sonar.java.libraries>target/**/*.jar</sonar.java.libraries> -->
        
        <!-- Test coverage (JaCoCo example) -->
        <!-- Recommended for test coverage reporting. Points SonarQube to the test coverage XML report generated by JaCoCo. -->
        <sonar.coverage.jacoco.xmlReportPaths>target/site/jacoco/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>

        <!-- Optional (in recent versions, Sonar auto-detects language from the project structure).
        Explicitly tells Sonar to analyze the project as Java. -->
        <sonar.language>java</sonar.language>

        <!-- Required if your code contains non-ASCII characters. Ensures SonarQube reads source files with the correct encoding. -->
        <sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Logging Dependency -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.7</version>
        </dependency>

        <!-- Implementation for SLF4J -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.7</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Unit Testing with JUnit -->
        <!-- Purpose: Write and run unit tests.
        Why needed: Testing is crucial in large applications to ensure stability, catch regressions, and support CI/CD. 
        Option 1: Explicit Separate Dependencies -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <!-- Compiler Plugin -->
            <!-- Ensures that your code compiles with Java 17.
            Important in large teams for consistent builds and compatibility. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>  <!-- Sets Java language level to 17 -->
                    <target>17</target>  <!-- Ensures bytecode targets JRE 17 -->
                </configuration>
            </plugin>

            <!-- SonarQube Maven Plugin -->
            <!-- Integrates SonarQube analysis into Maven lifecycle -->
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>3.11.0</version>  <!-- Always use the latest stable version -->
            </plugin>

            <!-- JaCoCo Maven Plugin Block This plugin generates code coverage reports used by SonarQube. -->

            <!-- Required for generating coverage reports for SonarQube (unless you're using another tool like Cobertura).
            This is the official JaCoCo plugin. -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.10</version>
                <executions>
                    <!-- Required This goal instruments your code before tests run, so JaCoCo can measure which lines are executed.
                    Runs during the initialize phase by default. -->
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>

                    <!-- Required This generates the actual XML report at target/site/jacoco/jacoco.xml.
                    Without this, SonarQube won't be able to find the coverage report. -->
                    <execution>
                        <id>report</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            
        </plugins>
    </build>
</project>





